# Kubernetes Job to automatically setup PeerDB CDC mirror via SQL
# This job runs after PeerDB is deployed and creates:
# - PostgreSQL peer (source)
# - ClickHouse peer (destination)
# - Mirror: pg_to_ch_mirror (users, orders, events tables)

apiVersion: v1
kind: ConfigMap
metadata:
  name: peerdb-setup-script
  namespace: peerdb
data:
  setup-mirror.sh: |
    #!/bin/sh
    set -e

    echo "=========================================="
    echo "PeerDB Mirror Auto-Setup via REST API"
    echo "=========================================="
    echo ""

    # PeerDB UI REST API endpoint (port 3000)
    PEERDB_API="http://peerdb-ui.peerdb.svc.cluster.local:3000"

    # Wait for PeerDB UI API
    echo "Waiting for PeerDB UI API (port 3000)..."
    for i in $(seq 1 60); do
      if wget -q --spider --timeout=5 "$PEERDB_API" 2>/dev/null || wget -q --timeout=5 -O- "$PEERDB_API/api/v1/peers" 2>/dev/null; then
        echo "✅ PeerDB UI API is responding!"
        sleep 10
        break
      fi
      if [ $((i % 6)) -eq 0 ]; then
        echo "  Attempt $i/60... waiting 5s"
      fi
      sleep 5
    done

    # Get PostgreSQL password from secret
    echo ""
    echo "Getting PostgreSQL password from secret..."
    PG_PASSWORD=$(kubectl get secret -n cloudnative-pg postgres-cluster-app -o jsonpath='{.data.password}' | base64 -d)

    # Install curl for API calls
    echo ""
    echo "Installing curl..."
    apk add --no-cache curl

    # Create basic auth header (empty user:password = just colon base64 encoded)
    AUTH_HEADER="Authorization: Basic $(echo -n ':peerdb' | base64)"

    # Create PostgreSQL Peer via REST API
    echo ""
    echo "Creating PostgreSQL peer via API..."
    curl -v -X POST "$PEERDB_API/api/v1/peers/create" \
      -H "$AUTH_HEADER" \
      -H "Content-Type: application/json" \
      -d "{
        \"peer\": {
          \"name\": \"postgres_source\",
          \"type\": 3,
          \"postgres_config\": {
            \"host\": \"postgres-cluster-rw.cloudnative-pg.svc.cluster.local\",
            \"port\": 5432,
            \"user\": \"app_user\",
            \"password\": \"$PG_PASSWORD\",
            \"database\": \"app_db\"
          }
        },
        \"allow_update\": false
      }"
    echo ""
    echo "✅ PostgreSQL peer request sent"

    # Note: REPLICATION permission must be granted manually or via postInitApplicationSQL
    # kubectl exec -n cloudnative-pg postgres-cluster-1 -- psql -U postgres -c "ALTER USER app_user WITH REPLICATION;"

    # Create ClickHouse Peer via REST API with MinIO S3
    # Note: S3 path required for staging CDC data
    echo ""
    echo "Creating ClickHouse peer via API with MinIO S3..."
    curl -v -X POST "$PEERDB_API/api/v1/peers/create" \
      -H "$AUTH_HEADER" \
      -H "Content-Type: application/json" \
      -d '{
        "peer": {
          "name": "clickhouse_destination",
          "type": 8,
          "clickhouse_config": {
            "host": "chi-clickhouse-cluster-main-cluster-0-0.clickhouse.svc.cluster.local",
            "port": 9000,
            "user": "admin",
            "password": "admin123",
            "database": "default",
            "disable_tls": true,
            "s3_path": "peerdb-staging",
            "access_key_id": "minioadmin",
            "secret_access_key": "minioadmin",
            "region": "us-east-1",
            "endpoint": "http://minio.minio.svc.cluster.local:9000"
          }
        },
        "allow_update": false
      }'
    echo ""
    echo "✅ ClickHouse peer request sent"

    # Wait a bit for peers to be created
    echo ""
    echo "Waiting for peers to be registered..."
    sleep 15

    # Create CDC Mirror via REST API
    echo ""
    echo "Creating CDC mirror via API..."
    curl -v -X POST "$PEERDB_API/api/v1/flows/cdc/create" \
      -H "$AUTH_HEADER" \
      -H "Content-Type: application/json" \
      -d '{
        "connection_configs": {
          "flow_job_name": "pg_to_ch_mirror",
          "source_name": "postgres_source",
          "destination_name": "clickhouse_destination",
          "table_mappings": [
            {
              "source_table_identifier": "public.users",
              "destination_table_identifier": "default.users"
            },
            {
              "source_table_identifier": "public.orders",
              "destination_table_identifier": "default.orders"
            },
            {
              "source_table_identifier": "public.events",
              "destination_table_identifier": "default.events"
            }
          ],
          "do_initial_snapshot": true,
          "max_batch_size": 1000000,
          "idle_timeout_seconds": 60
        }
      }'
    echo ""
    echo "✅ CDC mirror request sent"

    echo ""
    echo "=========================================="
    echo "Setup Complete!"
    echo "=========================================="
    echo "CDC Mirrors: postgres_source → clickhouse_destination"
    echo "Tables: users, orders, events"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: peerdb-setup-mirror
  namespace: peerdb
  labels:
    app: peerdb-setup
spec:
  # Keep job history for debugging
  ttlSecondsAfterFinished: 86400  # 24 hours
  backoffLimit: 3

  template:
    metadata:
      labels:
        app: peerdb-setup
    spec:
      restartPolicy: OnFailure

      # Service account with permissions to read secrets
      serviceAccountName: peerdb-setup

      containers:
        - name: setup-mirror
          image: postgres:16-alpine
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -e
              echo "Installing dependencies..."
              apk add --no-cache kubectl

              echo "Waiting for PostgreSQL to be ready..."
              until kubectl get pods -n cloudnative-pg -l cnpg.io/cluster=postgres-cluster | grep Running; do
                sleep 10
              done

              echo "Waiting for ClickHouse to be ready..."
              until kubectl get pods -n clickhouse -l clickhouse.altinity.com/chi=clickhouse-cluster | grep Running; do
                sleep 10
              done

              echo "Waiting for PeerDB to be ready..."
              until kubectl get pods -n peerdb -l app=peerdb | grep Running; do
                sleep 10
              done

              echo "Running setup script..."
              sh /scripts/setup-mirror.sh

          volumeMounts:
            - name: script
              mountPath: /scripts

          env:
            - name: PGPASSWORD
              value: "peerdb"

      volumes:
        - name: script
          configMap:
            name: peerdb-setup-script
            defaultMode: 0755

---
# ServiceAccount with permissions to read secrets
apiVersion: v1
kind: ServiceAccount
metadata:
  name: peerdb-setup
  namespace: peerdb

---
# Role to read secrets in cloudnative-pg namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: peerdb-setup-read-secrets
  namespace: cloudnative-pg
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]

---
# RoleBinding for cloudnative-pg namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: peerdb-setup-read-secrets
  namespace: cloudnative-pg
subjects:
  - kind: ServiceAccount
    name: peerdb-setup
    namespace: peerdb
roleRef:
  kind: Role
  name: peerdb-setup-read-secrets
  apiGroup: rbac.authorization.k8s.io

---
# Role to read pods in all namespaces (for readiness check)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: peerdb-setup-read-pods
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: peerdb-setup-read-pods
subjects:
  - kind: ServiceAccount
    name: peerdb-setup
    namespace: peerdb
roleRef:
  kind: ClusterRole
  name: peerdb-setup-read-pods
  apiGroup: rbac.authorization.k8s.io
